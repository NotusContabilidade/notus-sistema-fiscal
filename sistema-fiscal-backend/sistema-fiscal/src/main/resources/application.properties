spring.application.name=sistema-fiscal
# ===================================================
# CONFIGURAÇÃO DO BANCO DE DADOS (Substitui database.properties)
# ===================================================
# URL de conexão com o banco de dados PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/notus_db

# Usuário do banco de dados
spring.datasource.username=postgres

# Senha do banco de dados (coloque a sua senha aqui)
spring.datasource.password=*N0tvs277

# Indica ao Spring qual driver JDBC usar
spring.datasource.driver-class-name=org.postgresql.Driver

# Mostra no console o SQL que o Hibernate está gerando. Ótimo para debug.
spring.jpa.show-sql=true

# Propriedades do Hibernate
spring.jpa.properties.hibernate.format_sql=true

# Esta é a propriedade mais poderosa:
# 'update': O Hibernate irá comparar suas classes @Entity com o banco de dados e
# automaticamente adicionar colunas ou tabelas que estiverem faltando ao iniciar.
# CUIDADO: Em produção, o ideal é usar 'validate' ou ferramentas de migração como Flyway/Liquibase.
spring.jpa.hibernate.ddl-auto=update
# ===================================================
# CONFIGURAÇÃO DO LOG (Substitui simplelogger.properties)
# ===================================================
# Define o nível de log para a aplicação, mostrando apenas avisos e erros
logging.level.root=WARN
spring.jpa.open-in-view=false
spring.thymeleaf.check-template-location=false